#!/usr/bin/env bash
# Will execute specified action in the context of the specified stage.
# - $1 is environment, should be specified in ./stages/$1
# - $2 is optional action, can be env-specific in ./stages/$1/$2.sh or generic in ./stages/$2.sh
# - rest is arguments, or complete command if no action is specified.
#
# This script does some checks then loads environment variables from various folders
# (applying reasonable priority rules) and makes them available to the action scripts.
# It can even execute arbitrary commands, with all env variables.
#
# Examples:
# - use specific action to connect: ./do pre connect xavier.priour@as
# - execute arbitrary code:  ./do pre docker logs pre_datanimist_1

# sets $xdo_file to the absolute path of the 1st file
# that matches relative path in ./ + XDO_PATH.
# Or sets it empty if none found...
function xdo_findFirst() {
  # todo check that passed arg is relative
  xdo_file=''
  local all_path=".:$XDO_HOME:$XDO_PATH"
  local IFS=':'
  local folders
  set -f
  folders=( $all_path )
  set +f
  for d in "${folders[@]}"
  do
    local file="$d/$1"
    if [ -e "$file" ]; then
      xdo_file="$file"
      break;
    fi
  done
}

# Loads the first file it finds that matches relative path in ./ + XDO_PATH
#
# $1: relative path to the file
#function xdo_loadFirst() {
#  xdo_findFirst $1
#  if [ -z "$xdo_file" ]; then
#    echo "ERROR - unable to load $1, is it in the XDO_PATH ($xdo_path)?"
#    exit 1
#  else
#    source "$xdo_file"
#  fi
#}

# shellcheck source=./_internal.sh
source "$XDO_HOME/commands/_internal.sh"
export -f findRoot
# shellcheck source=./_functions.sh
source "$XDO_HOME/commands/_functions.sh"

# keep original command for timestamp
command="xdo $*"

ts_start=$(date '+%s')
timestamp "start '$command'"

findRoot
# it's ok if xdo_root is not set
# shellcheck disable=SC2154
if [ -z "$xdo_root" ]; then
  echo "ERROR - unable to find stages in the project, please create a ./stages folder at your root"
  exit 1
fi
cd "$xdo_root" || exit

# $UID is not automatically passed
export UID
# actual script launch location may be useful in some scripts

# check and allocate args
if [ -z "$1" ]
then
  echo "need 1st argument set to stage (dev, local, pre, prod)"
  exit 1
fi
if [ ! -d "./stages/$1" ]
then
  echo "1st argument must be a valid stage (./stages/$1 should exist)"
  exit 1
fi
export STG=$1
shift
if [ -z "$1" ]
then
  echo "need 2nd argument set to action (create, provision, ssh, start, stop) or command(s) to execute"
  exit 1
fi
export ACTION=$1
shift

ensure STG ACTION

# load env files if available, applying overrides
possible_env_files=(
  "./stages/_env.sh"
  "./stages/$STG/_env.sh"
  "./secrets/_env.sh"
  "./secrets/$STG/_env.sh"
)
for env_file in "${possible_env_files[@]}"
do
  if [ -e "$env_file" ]
  then
    # shellcheck source=/dev/null
    source "$env_file"
  fi
done

# if a shared file is present, load it
if [ -e ./commands/_lib.sh ]; then
  source ./commands/_lib.sh
fi

# if using docker-machine, activate the right one
if [ ! -z "$DOM_NAME" ]
then
#  status=`docker-machine status $DOM_NAME`
#  if [ "$status" == "Stopped" ]
#  then
#    echo "docker-machine $DOM_NAME is stopped, trying to start it"
#    docker-machine start $DOM_NAME
#    # todo: check afterward that it started ok
#  fi
  eval "$(docker-machine env "$DOM_NAME")"
fi

xdo_findFirst "commands/$ACTION.sh"
# now execute actual ACTION
if [ -e "./stages/$STG/$ACTION.sh" ]
then
  "./stages/$STG/$ACTION.sh" "$@"
elif [ -e "$xdo_file" ]
then
  "$xdo_file" "$@"
else
  # let's just eval the args in the context of the selected stage.
  # beware, the args are NOT evaluated on the docker machine - call ./do ssh [args] if you want that
  eval "$ACTION" "$@"
fi

exit_code=$?

ts_end=$(date '+%s')
ts_dur=$(printf "%'.f" $((ts_end - ts_start)))
timestamp "finish '$command' ($ts_dur seconds)"

exit $exit_code
