#!/usr/bin/env bash
# Will execute specified action in the context of the specified stage.
# - $1 is environment, should be specified in ./stages/$1
# - $2 is optional action, can be env-specific in ./stages/$1/$2.sh or generic in ./stages/$2.sh
# - rest is arguments, or complete command if no action is specified.
#
# This script does some checks then loads environment variables from various folders
# (applying reasonable priority rules) and makes them available to the action scripts.
# It can even execute arbitrary commands, with all env variables.
#
# Examples:
# - use specific action to connect: ./do pre connect xavier.priour@as
# - execute arbitrary code:  ./do pre docker logs pre_datanimist_1

source ./commands/_functions.sh

# keep original command for timestamp
command="xdo $*"

ts_start=`date +%s`
timestamp "start '$command'"

# $UID is not automatically passed
export UID
# actual script launch location may be useful in some scripts
export XDO_ROOT=`pwd`

# check and allocate args
if [ -z "$1" ]
then
  echo "need 1st argument set to stage (dev, local, pre, prod)"
  exit 1
fi
if [ ! -d "./stages/$1" ]
then
  echo "1st argument must be a valid stage (./stages/$1 should exist)"
  exit 1
fi
export STG=$1
shift
if [ -z "$1" ]
then
  echo "need 2nd argument set to action (create, provision, ssh, start, stop) or command(s) to execute"
  exit 1
fi
export ACTION=$1
shift
export ARGS=$*

ensure STG ACTION

# load env files if available, applying overrides
possible_env_files=(
  "./stages/_env.sh"
  "./stages/$STG/_env.sh"
  "./secrets/_env.sh"
  "./secrets/$STG/_env.sh"
)
for env_file in "${possible_env_files[@]}"
do
  if [ -e "$env_file" ]
  then
    source "$env_file"
  fi
done

# now execute actual ACTION
if [ -e ./stages/$STG/$ACTION.sh ]
then
  ./stages/$STG/$ACTION.sh $ARGS
elif [ -e ./commands/$ACTION.sh ]
then
  ./commands/$ACTION.sh $ARGS
else
  # let's just eval the args in the context of the selected stage.
  # beware, the args are NOT evaluated on the docker machine - call ./do ssh [args] if you want that
  eval $ACTION $ARGS
fi

ts_end=`date +%s`
ts_dur=`printf "%'.f\n" $(($ts_end - $ts_start))`
timestamp "finish '$command' ($ts_dur seconds)"
